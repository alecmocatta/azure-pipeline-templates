parameters:
  variables: {}
  matrix: {}

jobs:
- job: ''

  # variables: ${{ parameters.default }}
  variables:
    alec_a: $[variables['System.PullRequest.PullRequestId']]
    alec_b: $[variables['System.PullRequest.PullRequestNumber']]
    alec_c: $[variables['System.PullRequest.SourceBranch']]
    alec_d: $[variables['System.PullRequest.SourceRepositoryURI']]
    alec_e: $[variables['System.PullRequest.TargetBranch']]
    alec_f: $[variables['Build.SourceBranch']]
    alec_g: $[variables['Build.SourceBranchName']]
    alec_h: $[variables['Build.RequestedFor']]
    alec_i: $[variables['Build.RequestedForEmail']]
    alec_j: $[variables['Build.RequestedForId']]
    alec_k: $[variables['Build.SourceBranch']]
  strategy:
    matrix: ${{ parameters.matrix }}

  pool:
    vmImage: $(imageName)

  # Inspired by https://github.com/tokio-rs/tokio/blob/master/ci/azure-install-rust.yml
  steps:
  - checkout: self
    persistCredentials: true

  - script: |
      curl -sSf -o rustup-init.exe https://win.rustup.rs
      rustup-init.exe -y --default-toolchain none
      echo "##vso[task.setvariable variable=PATH;]%PATH%;%USERPROFILE%\.cargo\bin"
    displayName: 'Install Rust (Windows)'
    condition: eq(variables['Agent.OS'], 'Windows_NT')

  - bash: |
      set -o errexit; set -o pipefail; set -o nounset; set -o xtrace;
      curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain none
      echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
    displayName: 'Install Rust (Darwin)'
    condition: eq(variables['Agent.OS'], 'Darwin')

  - bash: |
      set -o errexit; set -o pipefail; set -o nounset; set -o xtrace;
      curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain none
      echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
      sudo apt-get install -y gcc-multilib
    displayName: 'Install Rust (Linux)'
    condition: eq(variables['Agent.OS'], 'Linux')

  - bash: |
      echo $ALEC_A
      echo $ALEC_B
      echo $ALEC_C
      echo $ALEC_D
      echo $ALEC_E
      echo $ALEC_F
      echo $ALEC_G
      echo $ALEC_H
      echo $ALEC_I
      echo $ALEC_J
      echo $ALEC_K
      set -o errexit; set -o pipefail; set -o nounset; set -o xtrace;
      rustup toolchain install $RUST_LINT_TOOLCHAIN
      rustup component add rustfmt --toolchain $RUST_LINT_TOOLCHAIN
      rustup component add clippy --toolchain $RUST_LINT_TOOLCHAIN
      for TARGET in $RUST_TARGET_CHECK $RUST_TARGET_BUILD $RUST_TARGET_RUN; do [ "$TARGET" = $(rustup target list --toolchain $RUST_LINT_TOOLCHAIN | grep default | grep -o -e '^[^ ]\+') ] || rustup target add --toolchain $RUST_LINT_TOOLCHAIN "$TARGET"; done
    displayName: Install Rust lint

  - bash: |
      set -o errexit; set -o pipefail; set -o nounset; set -o xtrace;
      cargo +$RUST_LINT_TOOLCHAIN fmt -- --check || (
        cargo +$RUST_LINT_TOOLCHAIN fmt
        git config user.email tidy@example.com
        git config user.name "Tidy"
        git add -A
        git commit -m "Automatic formatting with rustfmt"
        git push origin HEAD:refs/pull/14/head
        false
      )
    displayName: Check & fix formatting
    condition: eq(variables['Build.Reason'], 'PullRequest')

  - bash: |
      set -o errexit; set -o pipefail; set -o nounset; set -o xtrace;
      cargo +$RUST_LINT_TOOLCHAIN fmt -- --check
    displayName: Check formatting
    condition: ne(variables['Build.Reason'], 'PullRequest')

  - bash: |
      set -o errexit; set -o pipefail; set -o nounset; set -o xtrace;
      for TOOLCHAIN in $RUST_TOOLCHAIN; do (
        if [ "$TOOLCHAIN" != "$RUST_LINT_TOOLCHAIN" ]; then
          rustup toolchain install $TOOLCHAIN
          for TARGET in $RUST_TARGET_CHECK $RUST_TARGET_BUILD $RUST_TARGET_RUN; do [ "$TARGET" = $(rustup target list --toolchain $TOOLCHAIN | grep default | grep -o -e '^[^ ]\+') ] || rustup target add --toolchain $TOOLCHAIN "$TARGET"; done
        fi
        rustc +$TOOLCHAIN -Vv
        cargo +$TOOLCHAIN -V
      ); done
    displayName: Install Rust matrix

  - bash: |
      set -o errexit; set -o pipefail; set -o nounset; set -o xtrace;
      for TOOLCHAIN in $RUST_TOOLCHAIN; do (
        export TOOLCHAIN
        OLD_IFS=$IFS IFS=";" RUST_FLAGS="$RUST_FLAGS;"; for RUSTFLAGS in $RUST_FLAGS; do ( IFS=$OLD_IFS
          export RUSTFLAGS
          OLD_IFS=$IFS IFS=";" RUST_FEATURES="$RUST_FEATURES;"; for FEATURES in $RUST_FEATURES; do ( IFS=$OLD_IFS
            [ "$FEATURES" = "all" ] && FEATURES="" ALL_FEATURES="--all-features" || ALL_FEATURES=""
            export FEATURES
            export ALL_FEATURES
            for TARGET in $RUST_TARGET_CHECK $RUST_TARGET_BUILD $RUST_TARGET_RUN; do (
              cargo +$RUST_LINT_TOOLCHAIN clippy --target "$TARGET" --all-targets --no-default-features --features "$FEATURES" $ALL_FEATURES -- -D warnings
            ); done
            for TARGET in $RUST_TARGET_BUILD $RUST_TARGET_RUN; do (
              cargo +$TOOLCHAIN build --verbose --target "$TARGET" --all-targets --no-default-features --features "$FEATURES" $ALL_FEATURES
              case "${TARGET%%-*}" in i386|i686|x86_64) RUSTFLAGS="$RUSTFLAGS -C target-cpu=native";; esac
              cargo +$TOOLCHAIN build --verbose --target "$TARGET" --all-targets --no-default-features --features "$FEATURES" $ALL_FEATURES --release
            ); done
            for TARGET in $RUST_TARGET_RUN; do (
              RUST_BACKTRACE=full cargo +$TOOLCHAIN test --target "$TARGET" --no-default-features --features "$FEATURES" $ALL_FEATURES
              RUSTFLAGS="$RUSTFLAGS -C target-cpu=native" RUST_BACKTRACE=full cargo +$TOOLCHAIN test --target "$TARGET" --no-default-features --features "$FEATURES" $ALL_FEATURES --release
              RUSTFLAGS="$RUSTFLAGS -C target-cpu=native" RUST_BACKTRACE=full cargo +$TOOLCHAIN bench --target "$TARGET" --no-default-features --features "$FEATURES" $ALL_FEATURES
              [ ! -d examples ] || for example in examples/*; do example=${example##*/}; (
                RUST_BACKTRACE=full cargo +$TOOLCHAIN run --target "$TARGET" --example ${example%.*} --no-default-features --features "$FEATURES" $ALL_FEATURES
                RUSTFLAGS="$RUSTFLAGS -C target-cpu=native" RUST_BACKTRACE=full cargo +$TOOLCHAIN run --target "$TARGET" --example ${example%.*} --no-default-features --features "$FEATURES" $ALL_FEATURES --release
              ); done
            ); done
          ); done; IFS=$OLD_IFS
        ); done; IFS=$OLD_IFS
      ); done
    displayName: Build & Run

  - bash: |
      set -o errexit; set -o pipefail; set -o nounset; set -o xtrace;
      for TARGET in $RUST_TARGET_CHECK $RUST_TARGET_BUILD $RUST_TARGET_RUN; do
        cargo +$RUST_LINT_TOOLCHAIN doc --no-deps --target "$TARGET" --all-features --release &>/dev/null
      done
    displayName: Check documentation
