# This is for having multiple test matrices

parameters:
  ordinal: 1
  variables: {}
  matrix: {}
  endpoint: ''

jobs:
- job: ${{ format('test_{0}', parameters.ordinal) }}
  timeoutInMinutes: 0
  condition: and(succeeded(), or(ne(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.Reason'], 'Schedule')))

  variables: ${{ parameters.default }}
  strategy:
    matrix: ${{ parameters.matrix }}

  pool:
    vmImage: $(imageName)

  steps:
  - checkout: self
    submodules: true
    persistCredentials: true

  - bash: |
      set -o errexit; set -o pipefail; set -o nounset; set -o xtrace; shopt -s nullglob;
      if ! rustup -V; then
        curl -sSf -o rustup-init.exe https://win.rustup.rs
        ./rustup-init.exe -y --default-toolchain none
        echo "##vso[task.setvariable variable=PATH;]${CARGO_HOME:-$USERPROFILE\.cargo}\bin;$PATH"
      fi
    condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))
    displayName: 'Install Rust (Windows)'

  - bash: |
      set -o errexit; set -o pipefail; set -o nounset; set -o xtrace; shopt -s nullglob;
      if ! rustup -V; then
        curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain none
        echo "##vso[task.setvariable variable=PATH;]${CARGO_HOME:-$HOME/.cargo}/bin:$PATH"
      fi
    condition: and(succeeded(), eq(variables['Agent.OS'], 'Darwin'))
    displayName: 'Install Rust (macOS)'

  - bash: |
      set -o errexit; set -o pipefail; set -o nounset; set -o xtrace; shopt -s nullglob;
      if ! rustup -V; then
        curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain none
        echo "##vso[task.setvariable variable=PATH;]${CARGO_HOME:-$HOME/.cargo}/bin:$PATH"
      fi
      sudo dpkg --add-architecture i386
      sudo apt-get update
      sudo apt-get install -y gcc-multilib libssl-dev:i386 musl-tools
      sudo mv /usr/bin/{,x86_64-linux-}musl-gcc
      sudo mv /usr/bin/{,x86_64-linux-}musl-ldd
    condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'))
    displayName: 'Install Rust (Linux)'

  - bash: |
      set -o errexit; set -o pipefail; set -o nounset; set -o xtrace; shopt -s nullglob;
      rustup set profile minimal
      rustup toolchain install --no-self-update --component rustfmt clippy -- $RUST_LINT_TOOLCHAIN
    displayName: Install Rust lint toolchain

  - bash: |
      set -o errexit; set -o pipefail; set -o nounset; set -o xtrace; shopt -s nullglob;
      cargo +$RUST_LINT_TOOLCHAIN fmt --all -- --check || (
        git reset --hard HEAD^2
        cargo +$RUST_LINT_TOOLCHAIN fmt --all
        git config user.email tidy.bot@example.com
        git config user.name "Tidy Bot"
        git add -A
        git commit -m "Automatic formatting with rustfmt"
        git -c http.extraheader="$(git config --get "http.$BUILD_REPOSITORY_URI.extraheader")" push --verbose "$SYSTEM_PULLREQUEST_SOURCEREPOSITORYURI" "HEAD:$SYSTEM_PULLREQUEST_SOURCEBRANCH"
        false
      )
    condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
    displayName: Check & fix formatting

  - bash: |
      set -o errexit; set -o pipefail; set -o nounset; set -o xtrace; shopt -s nullglob;
      cargo +$RUST_LINT_TOOLCHAIN fmt --all -- --check
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    displayName: Check formatting

  - bash: |
      set -o errexit; set -o pipefail; set -o nounset; set -o xtrace; shopt -s nullglob;
      for TOOLCHAIN in $RUST_LINT_TOOLCHAIN $RUST_TOOLCHAIN; do (
        rustup toolchain install --no-self-update --target $RUST_TARGET_CHECK $RUST_TARGET_BUILD $RUST_TARGET_RUN -- $TOOLCHAIN
        rustc +$TOOLCHAIN -Vv
        cargo +$TOOLCHAIN -V
      ); done
      rustup component add --toolchain "$RUST_LINT_TOOLCHAIN" miri
      for TARGET in $RUST_TARGET_RUN; do
        cargo +$RUST_LINT_TOOLCHAIN miri setup --target "$TARGET"
      done
      for TARGET in $RUST_TARGET_CHECK $RUST_TARGET_BUILD $RUST_TARGET_RUN; do
        if [ "$TARGET" = "wasm32-unknown-unknown" ]; then
          cargo +$RUST_LINT_TOOLCHAIN install --debug wasm-bindgen-cli
          curl -Ls https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-11/wasi-sysroot-11.0.tar.gz | tar xvz -C $HOME
        fi
      done
    displayName: Install Rust toolchains

  - bash: |
      set -o errexit; set -o pipefail; set -o nounset; set -o xtrace; shopt -s nullglob;
      export PKG_CONFIG_ALLOW_CROSS=1
      export CFLAGS_wasm32_unknown_unknown="--target=wasm32-unknown-wasi --sysroot $HOME/wasi-sysroot"
      export CARGO_TARGET_WASM32_UNKNOWN_UNKNOWN_RUNNER=wasm-bindgen-test-runner
      export CC_x86_64_unknown_linux_musl=x86_64-linux-musl-gcc
      export CXX_x86_64_unknown_linux_musl=x86_64-linux-musl-g++
      export CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER=rust-lld
      export CC_i686_unknown_linux_musl=i686-linux-musl-gcc
      export CXX_i686_unknown_linux_musl=i686-linux-musl-g++
      export CARGO_TARGET_I686_UNKNOWN_LINUX_MUSL_LINKER=rust-lld
      export CC_aarch64_unknown_linux_musl=aarch64-linux-musl-gcc
      export CXX_aarch64_unknown_linux_musl=aarch64-linux-musl-g++
      export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=rust-lld
      RUST_PACKAGES="${RUST_PACKAGES:---all}"
      export RUST_PACKAGES
      RUST_FEATURES_CLIPPY="${RUST_FEATURES_CLIPPY:-$RUST_FEATURES}"
      export RUST_FEATURES_CLIPPY
      OLD_IFS=$IFS IFS=";" RUST_FLAGS="$RUST_FLAGS;"; for RUSTFLAGS in $RUST_FLAGS; do ( IFS=$OLD_IFS
        export RUSTFLAGS
        OLD_IFS=$IFS IFS=";" RUST_FEATURES_CLIPPY="$RUST_FEATURES_CLIPPY;"; for FEATURES in $RUST_FEATURES_CLIPPY; do ( IFS=$OLD_IFS
          [ "$FEATURES" = "all" ] && FEATURES="" ALL_FEATURES="--all-features" || ALL_FEATURES=""
          export FEATURES
          export ALL_FEATURES
          for TARGET in $RUST_TARGET_CHECK $RUST_TARGET_BUILD $RUST_TARGET_RUN; do (
            cargo +$RUST_LINT_TOOLCHAIN clippy --target "$TARGET" $RUST_PACKAGES --all-targets --no-default-features --features "$FEATURES" $ALL_FEATURES -- -D warnings
          ); done
        ); done; IFS=$OLD_IFS
      ); done; IFS=$OLD_IFS
      rm Cargo.lock
      FEATURES="${RUST_DOC_FEATURES-}"
      [ "$FEATURES" = "all" ] && FEATURES="" ALL_FEATURES="--all-features" || ALL_FEATURES=""
      for TARGET in $RUST_TARGET_CHECK $RUST_TARGET_BUILD $RUST_TARGET_RUN; do
        cargo +$RUST_LINT_TOOLCHAIN doc $RUST_PACKAGES --no-deps --target "$TARGET" --no-default-features --features "$FEATURES" $ALL_FEATURES &>/dev/null
      done
      #cargo +$RUST_LINT_TOOLCHAIN package
      rm Cargo.lock
    displayName: Lint code

  - bash: |
      set -o errexit; set -o pipefail; set -o nounset; set -o xtrace; shopt -s nullglob;
      export PKG_CONFIG_ALLOW_CROSS=1
      export CFLAGS_wasm32_unknown_unknown="--target=wasm32-unknown-wasi --sysroot $HOME/wasi-sysroot"
      export CARGO_TARGET_WASM32_UNKNOWN_UNKNOWN_RUNNER=wasm-bindgen-test-runner
      export CC_x86_64_unknown_linux_musl=x86_64-linux-musl-gcc
      export CXX_x86_64_unknown_linux_musl=x86_64-linux-musl-g++
      export CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER=rust-lld
      export CC_i686_unknown_linux_musl=i686-linux-musl-gcc
      export CXX_i686_unknown_linux_musl=i686-linux-musl-g++
      export CARGO_TARGET_I686_UNKNOWN_LINUX_MUSL_LINKER=rust-lld
      export CC_aarch64_unknown_linux_musl=aarch64-linux-musl-gcc
      export CXX_aarch64_unknown_linux_musl=aarch64-linux-musl-g++
      export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=rust-lld
      cargo +$RUST_LINT_TOOLCHAIN install --debug cargo-print
      RUST_PACKAGES="${RUST_PACKAGES:---all}"
      export RUST_PACKAGES
      for TOOLCHAIN in $RUST_TOOLCHAIN; do (
        export TOOLCHAIN
        OLD_IFS=$IFS IFS=";" RUST_FLAGS="$RUST_FLAGS;"; for RUSTFLAGS in $RUST_FLAGS; do ( IFS=$OLD_IFS
          export RUSTFLAGS
          OLD_IFS=$IFS IFS=";" RUST_FEATURES="$RUST_FEATURES;"; for FEATURES in $RUST_FEATURES; do ( IFS=$OLD_IFS
            [ "$FEATURES" = "all" ] && FEATURES="" ALL_FEATURES="--all-features" || ALL_FEATURES=""
            export FEATURES
            export ALL_FEATURES
            for TARGET in $RUST_TARGET_BUILD; do (
              RUST_BACKTRACE=full cargo +$TOOLCHAIN test --no-run --target "$TARGET" $RUST_PACKAGES --no-default-features --features "$FEATURES" $ALL_FEATURES
              case "${TARGET%%-*}" in i386|i686|x86_64) RUSTFLAGS="$RUSTFLAGS ";; esac
              RUST_BACKTRACE=full cargo +$TOOLCHAIN test --no-run --target "$TARGET" $RUST_PACKAGES --no-default-features --features "$FEATURES" $ALL_FEATURES --release
            ); done
            for TARGET in $RUST_TARGET_RUN; do (
              RUST_BACKTRACE=full cargo +$TOOLCHAIN test --target "$TARGET" $RUST_PACKAGES --no-default-features --features "$FEATURES" $ALL_FEATURES
              RUSTFLAGS="$RUSTFLAGS " RUST_BACKTRACE=full cargo +$TOOLCHAIN test --target "$TARGET" $RUST_PACKAGES --no-default-features --features "$FEATURES" $ALL_FEATURES --release
              [ "$TARGET" = "wasm32-unknown-unknown" ] && exit
              RUSTFLAGS="$RUSTFLAGS " RUST_BACKTRACE=full cargo +$TOOLCHAIN bench --target "$TARGET" $RUST_PACKAGES --no-default-features --features "$FEATURES" $ALL_FEATURES
              examples=$(cargo +$RUST_LINT_TOOLCHAIN print examples --no-default-features --features "$FEATURES" $ALL_FEATURES)
              for example in $examples; do (
                RUST_BACKTRACE=full cargo +$TOOLCHAIN run --target "$TARGET" --example "$example" --no-default-features --features "$FEATURES" $ALL_FEATURES
                RUSTFLAGS="$RUSTFLAGS " RUST_BACKTRACE=full cargo +$TOOLCHAIN run --target "$TARGET" --example "$example" --no-default-features --features "$FEATURES" $ALL_FEATURES --release
              ); done
            ); done
          ); done; IFS=$OLD_IFS
        ); done; IFS=$OLD_IFS
        rm Cargo.lock
      ); done
    env:
      RUST_LINT_TOOLCHAIN: ${{ parameters.default.rust_lint_toolchain }}
    displayName: Run tests

  - bash: |
      set -o errexit; set -o pipefail; set -o nounset; set -o xtrace; shopt -s nullglob;
      export PKG_CONFIG_ALLOW_CROSS=1
      export CFLAGS_wasm32_unknown_unknown="--target=wasm32-unknown-wasi --sysroot $HOME/wasi-sysroot"
      export CARGO_TARGET_WASM32_UNKNOWN_UNKNOWN_RUNNER=wasm-bindgen-test-runner
      export CC_x86_64_unknown_linux_musl=x86_64-linux-musl-gcc
      export CXX_x86_64_unknown_linux_musl=x86_64-linux-musl-g++
      export CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER=rust-lld
      export CC_i686_unknown_linux_musl=i686-linux-musl-gcc
      export CXX_i686_unknown_linux_musl=i686-linux-musl-g++
      export CARGO_TARGET_I686_UNKNOWN_LINUX_MUSL_LINKER=rust-lld
      export CC_aarch64_unknown_linux_musl=aarch64-linux-musl-gcc
      export CXX_aarch64_unknown_linux_musl=aarch64-linux-musl-g++
      export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=rust-lld
      RUST_PACKAGES="${RUST_PACKAGES:---all}"
      export RUST_PACKAGES
      RUST_FEATURES_MIRI="${RUST_FEATURES_MIRI:-$RUST_FEATURES}"
      export RUST_FEATURES_MIRI
      OLD_IFS=$IFS IFS=";" RUST_FLAGS="$RUST_FLAGS;"; for RUSTFLAGS in $RUST_FLAGS; do ( IFS=$OLD_IFS
        export RUSTFLAGS
        OLD_IFS=$IFS IFS=";" RUST_FEATURES_MIRI="$RUST_FEATURES_MIRI;"; for FEATURES in $RUST_FEATURES_MIRI; do ( IFS=$OLD_IFS
          [ "$FEATURES" = "all" ] && FEATURES="" ALL_FEATURES="--all-features" || ALL_FEATURES=""
          export FEATURES
          export ALL_FEATURES
          for TARGET in $RUST_TARGET_RUN; do (
            # avoid windows till https://github.com/rust-lang/miri/issues/1013
            [ "$TARGET" = "wasm32-unknown-unknown" -o "$TARGET" = "x86_64-pc-windows-msvc" ] && exit
            cargo +$RUST_LINT_TOOLCHAIN clean
            RUST_BACKTRACE=full cargo +$RUST_LINT_TOOLCHAIN miri test --target "$TARGET" $RUST_PACKAGES --no-default-features --features "$FEATURES" $ALL_FEATURES -- -Zmiri-disable-isolation
          ); done
        ); done; IFS=$OLD_IFS
      ); done; IFS=$OLD_IFS
    env:
      RUST_LINT_TOOLCHAIN: ${{ parameters.default.rust_lint_toolchain }}
    displayName: Run tests with miri
